### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Auth {
  id: String!
  refreshToken: String!
  tokenExpiry: String!
  userId: String!
}

input AuthCreateOneWithoutUserInput {
  connect: AuthWhereUniqueInput
  connectOrCreate: AuthCreateOrConnectWithoutuserInput
  create: AuthCreateWithoutUserInput
}

input AuthCreateOrConnectWithoutuserInput {
  create: AuthCreateWithoutUserInput!
  where: AuthWhereUniqueInput!
}

input AuthCreateWithoutUserInput {
  id: String
  refreshToken: String!
  tokenExpiry: String!
}

type AuthPayload {
  token: String!
  user: User
}

input AuthUpdateOneWithoutUserInput {
  connect: AuthWhereUniqueInput
  connectOrCreate: AuthCreateOrConnectWithoutuserInput
  create: AuthCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AuthUpdateWithoutUserInput
  upsert: AuthUpsertWithoutUserInput
}

input AuthUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  refreshToken: StringFieldUpdateOperationsInput
  tokenExpiry: StringFieldUpdateOperationsInput
}

input AuthUpsertWithoutUserInput {
  create: AuthCreateWithoutUserInput!
  update: AuthUpdateWithoutUserInput!
}

input AuthWhereInput {
  AND: [AuthWhereInput!]
  id: StringFilter
  NOT: [AuthWhereInput!]
  OR: [AuthWhereInput!]
  refreshToken: StringFilter
  tokenExpiry: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input AuthWhereUniqueInput {
  id: String
}

type BatchPayload {
  count: Int!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): AuthPayload!
  logout(userId: String!): Boolean!
  refreshToken(userId: String!): AuthPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  allUsers: [User]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  auth: Auth
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: String!
  lastname: String!
  password: String!
  phone: String!
  role: String!
  updatedAt: DateTime!
}

input UserCreateInput {
  auth: AuthCreateOneWithoutUserInput
  createdAt: DateTime
  email: String!
  firstname: String!
  id: String
  lastname: String!
  password: String!
  phone: String!
  role: String
  updatedAt: DateTime
}

input UserUpdateInput {
  auth: AuthUpdateOneWithoutUserInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstname: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  auth: AuthWhereInput
  createdAt: DateTimeFilter
  email: StringFilter
  firstname: StringFilter
  id: StringFilter
  lastname: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  phone: StringFilter
  role: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
}
